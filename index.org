#+STARTUP: content
#+STARTUP: fold
* 設定
** Boot
*** セッション保存
#+begin_src elisp
  (require 'desktop)                          ;; desktopパッケージを読み込み
  (desktop-save-mode 1)                       ;; セッション保存を有効化
  (setq desktop-restore-eager 5)              ;; 起動時に復元するバッファの数（残りは遅延ロード）
  (setq desktop-save t)                       ;; 毎回保存する（ask-if-new, ask, if-exists, always, t）
  (setq desktop-load-locked-desktop t)        ;; ロックされていても読み込む
  (setq desktop-path '("~/.emacs.d/desktop")) ;; セッション保存先
  (setq desktop-auto-save-timeout 30)         ;; 自動保存（秒）
#+end_src

保存ディレクトリの作成
#+begin_src elisp
  (unless (file-exists-p "~/.emacs.d/desktop")
    (make-directory "~/.emacs.d/desktop" t))
#+end_src
*** バックアップファイルを作らない
#+begin_src elisp
  (setq make-backup-files nil)
#+end_src

*** 自動保存ファイルを作らない
#+begin_src elisp
  (setq auto-save-default nil)
#+end_src
** 設定
*** Ascii Mode
#+begin_src elisp
  (mac-auto-ascii-mode 1)
#+end_src
*** 自動保存
#+begin_src elisp
  (auto-save-visited-mode 1)
  (setq auto-save-visited-interval 2)
#+end_src
*** revert 無効
#+begin_src elisp
  (setq global-auto-revert-mode nil)
  (setq auto-revert-mode nil)
#+end_src
** 見た目の設定
*** 使うテーマ
#+begin_src elisp
  ;;(load-theme 'mindre t)
#+end_src

*** 画面の余白
#+begin_src elisp
  (setq-default left-margin-width 2
                right-margin-width 2
                top-margin-width 2)
#+end_src

*** フォント
**** Default Font
#+begin_src elisp
  (set-face-attribute 'default nil :family "Iosevka Custom Rikuto Slab" :weight 'light :height 150)
#+end_src
**** 日本語フォント
#+begin_src elisp
  (set-fontset-font nil '(#x80 . #x10ffff) (font-spec :family "IPAMincho"))
#+end_src

*** メニューバー
#+begin_src elisp
  (menu-bar-mode 1)
#+end_src

*** ステータスバー
#+begin_src elisp
  (tool-bar-mode -1)
#+end_src

** エディター設定
*** 空白関連

#+begin_src elisp
  (setq whitespace-style '(trailing
                           tabs
                           spaces
                           empty
                           space-mark
                           tab-mark))
#+end_src
**** 空白設定を有効
#+begin_src elisp
  (global-whitespace-mode 1)
#+end_src
**** 記号の
#+begin_src elisp
  (setq whitespace-display-mappings
        '(;; スペース文字: 中点（·）で表示
          (space-mark 32 [8231] [46])
          ;; タブ文字: 右向き三角（▷）+ タブで表示
          (tab-mark 9 [9655 9] [92 9])
          ;; 改行文字: 段落記号（¶）で表示
          (newline-mark 10 [182 10])))
#+end_src
**** 色
#+begin_src elisp
  (custom-set-faces
   '(whitespace-space ((t (:foreground "#e3dfd5")))))
  (global-whitespace-mode t)
#+end_src

*** 行番号を表示
#+begin_src elisp
  (global-display-line-numbers-mode 1)
#+end_src

*** 行間
#+begin_src elisp
  (setq-default line-spacing 0.5)
#+end_src

*** 括弧の中を強調する

*** 括弧を自動挿入
#+begin_src elisp
  (electric-pair-mode 1)
#+end_src

** Org-mode
*** Appearance
**** 見出しをインデントする
#+begin_src elisp
  (setq org-startup-indented t)
#+end_src
**** 見出しをインデントしたら * が減らないようにする
#+begin_src elisp
  (setq org-indent-mode-turns-on-hiding-stars nil)
#+end_src
**** 見出しインデントの幅
#+begin_src elisp
  (setq org-indent-indentation-per-level 4)
#+end_src
**** 見出しの初期状態
#+begin_src elisp
  (setq org-startup-folded 'content)
#+end_src
**** 見出しの大きさと色の設定
#+begin_src elisp
  (custom-set-faces
   '(org-level-1 ((t (:foreground "#7f1d1d" :background nil :height 1.0))))
   '(org-level-2 ((t (:foreground "#a16207" :background nil :height 1.0))))
   '(org-level-3 ((t (:foreground "#166534" :background nil :height 1.0))))
   '(org-level-4 ((t (:foreground "#0f766e" :background nil :height 1.0))))
   '(org-level-5 ((t (:foreground "#1e40af" :background nil :height 1.0))))
   '(org-level-6 ((t (:foreground "#7c2d92" :background nil :height 1.0))))
   '(org-level-7 ((t (:foreground "#be185d" :background nil :height 1.0))))
   '(org-level-8 ((t (:foreground "#6b7280" :background nil :height 1.0)))))
#+end_src

**** 強調要素を非表示
~*~ や ~~~ などの強調マーカーを非表示
#+begin_src elisp
  (setq org-hide-emphasis-markers t)
#+end_src
**** 強調要素の見ため
#+begin_src elisp
  (with-eval-after-load 'org
    (setq org-emphasis-alist
          '(("*" (:weight bold :foreground "green"))
            ("/" italic)
            ("_" underline)
            ("=" org-verbatim verbatim)
            ("~" (:foreground "salmon3"))
            ("+" (:strike-through t)))))
#+end_src
**** org block の begin と end の背景色を設定
#+begin_src elisp
  ;;(set-face-attribute 'org-block-begin-line nil
  ;;                    :background "#f0ead9"
  ;;                    :extend t)
  ;;
  ;;(set-face-attribute 'org-block-end-line nil
  ;;                    :background "#f0ead9"
  ;;                    :extend t)
#+end_src

**** org block の背景色を設定
#+begin_src elisp
  ;; block要素リストを定義
  (defvar my-org-block-faces
    '(org-block
      org-quote
      org-verse))

  ;; 各block要素に背景色を適用する関数
  (defun my-set-org-block-backgrounds (color)
    "すべてのorg block要素に背景色を設定する関数"
    (mapcar (lambda (face)
              (set-face-attribute face nil
                                  :background color
                                  :extend t))
            my-org-block-faces))

  ;; quote/verseブロックのフォント化を有効化
  (setq org-fontify-quote-and-verse-blocks t)

  ;; 背景色を適用
  ;;(my-set-org-block-backgrounds "#f0ead9")
#+end_src

*** Editor
**** QA を定義
#+begin_src elisp
  (add-hook 'org-mode-hook
            (lambda ()
              (font-lock-add-keywords nil
                                      '(("^- Q ::" 0 '(:foreground "IndianRed4" :weight bold) prepend)
                                        ("^- A ::" 0 '(:foreground "OliveDrab4" :weight bold) prepend)))))
#+end_src
**** todo keyword
#+begin_src elisp
  (setq org-todo-keywords
        '((sequence "未着手(t)"
                    "進行中(p)"
                    "相手待ち(w)"
                    "|"
                    "完了(d)"
                    "キャンセル(c)")))
  ;; TODOキーワードごとに異なる背景色と濃い文字色を設定
  (setq org-todo-keyword-faces
        '(("未着手" . (:background "#ffe6e6" :foreground "#cc0000" :weight bold :box (:line-width 2 :style released-button)))
          ("進行中" . (:background "#fff3cd" :foreground "#996600" :weight bold :box (:line-width 2 :style released-button)))
          ("相手待ち" . (:background "#E1EFE6" :foreground "#00479F" :weight bold :box (:line-width 2 :style released-button)))
          ("完了" . (:background "#E1F0C8" :foreground "#348300" :weight bold :box (:line-width 2 :style released-button)))
          ("キャンセル" . (:background "#f5f5f5" :foreground "#666666" :weight bold :box (:line-width 2 :style released-button)))))
#+end_src
**** agenda-files にフォルダを追加
#+begin_src elisp
  (setq org-agenda-files '("~/blog/org-blog/private"))
#+end_src
**** Clock in, Clock out 時に TODO のステータスを自動で更新
#+begin_src elisp
  ;; clock-in時に自動で「進行中」にする
  (defun my/org-clock-in-set-status ()
    "clock-in時に自動で進行中にする"
    (when (not (string= (org-get-todo-state) "進行中"))
      (org-todo "進行中")))

  ;; clock-out時に完了状態を選択する
  (defun my/org-clock-out-choose-status ()
    "clock-out時に相手待ちか完了かを選択する"
    (when (string= (org-get-todo-state) "進行中")
      (let ((choice (read-char-choice 
                     "タスクの状態を選択: (w)相手待ち (d)完了 (i)中断: " 
                     '(?w ?d ?i))))
        (cond
         ((eq choice ?w) (org-todo "相手待ち"))
         ((eq choice ?d) (org-todo "完了"))
         ((eq choice ?i) (org-todo "中断")))))) ; 何もしない

  ;; フックに追加
  (add-hook 'org-clock-in-hook 'my/org-clock-in-set-status)
  (add-hook 'org-clock-out-hook 'my/org-clock-out-choose-status)
#+end_src
**** org-speed-command
#+begin_src elisp
  (setq org-use-speed-commands t)
#+end_src
** 独自コマンド
*** Window サイズを変えるコマンド
#+begin_src elisp
  (defun window-resizer ()
    "Control window size and position."
    (interactive)
    (let ((window-obj (selected-window))
          (current-width (window-width))
          (current-height (window-height))
          (dx (if (= (nth 0 (window-edges)) 0) 1
                -1))
          (dy (if (= (nth 1 (window-edges)) 0) 1
                -1))
          action c)
      (catch 'end-flag
        (while t
          (setq action
                (read-key-sequence-vector (format "size[%dx%d]"
                                                  (window-width)
                                                  (window-height))))
          (setq c (aref action 0))
          (cond ((= c ?f)
                 (enlarge-window-horizontally dx))
                ((= c ?b)
                 (shrink-window-horizontally dx))
                ((= c ?n)
                 (enlarge-window dy))
                ((= c ?p)
                 (shrink-window dy))
                ;; otherwise
                (t
                 (let ((last-command-char (aref action 0))
                       (command (key-binding action)))
                   (when command
                     (call-interactively command)))
                 (message "Quit")
                 (throw 'end-flag t)))))))

#+end_src
*** Buffer の再読み込み
#+begin_src elisp
  (defun revert-buffer-no-confirm (&optional force-reverting)
    (interactive "P")
    (if (or force-reverting (not (buffer-modified-p)))
        (revert-buffer :ignore-auto :noconfirm)
      (error "The buffer has been modified")))
#+end_src
*** ~/.emacs/index.org を開く
#+begin_src elisp
  (defun open-index-org ()
    "open init.el"
    (interactive)
    (find-file "~/.emacs.d/index.org"))
#+end_src
*** ~/blog を開く
#+begin_src elisp
  (defun open-blog ()
    "open blog"
    (interactive)
    (find-file "~/blog"))
#+end_src
*** ~/.emacs/init.el を読み込み
#+begin_src elisp
  (defun load-file-init-el ()
    "load-file init.el"
    (interactive)
    (load-file (expand-file-name "~/.emacs.d/init.el")))
#+end_src
** キーバインド
*** Option/Alt を Meta Key にする
#+begin_src elisp
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'meta))
#+end_src
*** Command を Super Key にする
#+begin_src elisp
  (when (eq system-type 'darwind)
    (setq mac-command-modifer 'super))
#+end_src
*** C-h -> バックスペース
#+begin_src elisp
  (keyboard-translate ?\C-h ?\C-?)
#+end_src
*** C-x ? > ヘルプコマンド
#+begin_src elisp
  (global-set-key (kbd "C-x ?") 'help-command)
#+end_src
*** ; -> sticky key for ddskk
#+begin_src elisp
  (setq skk-sticky-key ";")
#+end_src
*** C-k -> 行削除
#+begin_src elisp
  (with-eval-after-load 'simple
    (setq kill-whole-line t))
#+end_src
*** C-z -> Mark
#+begin_src elisp
  (global-set-key (kbd "C-z") 'set-mark-command)
#+end_src
*** C-s -> Swiper
#+begin_src elisp
  (global-set-key (kbd "C-s") 'swiper)
#+end_src
*** M-r -> Buffer Reload
#+begin_src elisp
  (global-set-key (kbd "M-r") 'revert-buffer-no-confirm)
#+end_src
*** ￥ -> \
#+begin_src elisp
  (define-key global-map [?￥] [?\\])
#+end_src
*** C-c a -> Org-agenda
#+begin_src elisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

* end
